@page "/ProjectForm"
@using PB.Core
@using PB.Client.Services
@using System.Net.Http
@inject HttpClient http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<style>
    form .row {
        margin-bottom: 20px;
    }
</style>

<h2>Create new project</h2>

@if (project == null || Educations == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenTemplateForm Data="@project" Submit="@((TempProject args) => { Submit(args); })">

        <RadzenFieldset Text="" style="width: 100%;">
            <div class="row">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Project Title" />
                </div>
                <div class="col-md-8">
                    <RadzenTextBox @bind-Value=@project.Title style="width: 100%;" Name="Title" />
                </div>
            </div>
            <div class="row">
                <div class="col-xl-6">
                    <h6>Notifications</h6>
                    <RadzenSwitch @bind-Value=@project.Notification Style="margin-bottom: 20px" Change=@(args => OnChange(args,
                    "Notification")) />
                    <br />
                </div>
            </div>
            <div class="row">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Description" />
                </div>
                <div class="col-md-8">
                    <RadzenTextArea @bind-Value=@project.Description style="width: 100%" Name="Description" />
                </div>
            </div>
            <div class="row">
                <RadzenCard>
                <h4>Select Educations</h4>
                <p>Select the educations that you want your project to be visible to!</p>
                <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value=@project.ChosenEducations Multiple="true" Data=@Educations
                               TextProperty="Name" ValueProperty="Id" Change=@(args => OnEducationChange(args)) Style="height:200px" Class="w-100">
                    <Template Context="innercontext">
                        @((innercontext as EducationDetailsDTO).UniversityId) - @((innercontext as EducationDetailsDTO).Name) - @((innercontext as EducationDetailsDTO).Grade)
                    </Template>
                </RadzenListBox>
            </RadzenCard>
            </div>
        </RadzenFieldset>

        <div class="row justify-content-center">
            <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Save" />
                <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel"
                style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel" />
            </div>
        </div>
    </RadzenTemplateForm>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int? Pid {get; set;}
    private TempProject? project {get; set;}
    //IEnumerable<int> ChosenEducations;
    ICollection<EducationDetailsDTO> Educations;
    public class TempProject
    {
        public string Title { get; set; }
        public bool Notification { get; set; }
        public string Description { get; set; }
        public IEnumerable<int> ChosenEducations { get; set; } = new HashSet<int>();
    }



    protected override async Task OnInitializedAsync()
    {
        Educations = (await UniversityService.GetAllEducations(http)).OrderBy(e => e.UniversityId).ThenBy(e => e.Name).ToList();

        if(Pid != null){
            var result = await ProjectService.GetProject(http, Pid);
            if(result != null){
                project = new TempProject{Title=result.Title, Notification=result.Notification, Description=result.Description, ChosenEducations=result.Educations};
            }else{
                project = new TempProject();
            }
        }else{
            project = new TempProject();
        }
    }
    

    async void Submit(TempProject arg)
    {
        var req = new ProjectCreateDTO{Title= arg.Title, Description=arg.Description, Notification= arg.Notification, Educations= arg.ChosenEducations.ToHashSet()};
        if(Pid != null){req.Id = Pid;}
        Console.WriteLine(arg.Notification);
        Console.WriteLine(arg.Title);
        Console.WriteLine(arg.Description);
        Console.WriteLine(arg.ChosenEducations.First());
        var res = await ProjectService.CreateProject(http, req);
        Console.WriteLine(res!.ToString());
        if (res.IsSuccessStatusCode)
        {
            var created = await res.Content.ReadFromJsonAsync<ProjectDetailsDTO>();
            var uri = $"{NavigationManager.BaseUri}project/{created.ID}";
            NavigationManager.NavigateTo(uri);
            await JsRuntime.InvokeVoidAsync("alert", "Project created succesfully!"); //Popup when succesfully created project.

        }
    //Called when you press save on project form
    }

    void OnEducationChange(object O){
        Console.WriteLine(O);
    }

    void OnChange(bool? value, string name)
    {
        
    }

    void Cancel()
    {
        NavigationManager.NavigateTo($"{NavigationManager.BaseUri}MyProjects");
    }
}

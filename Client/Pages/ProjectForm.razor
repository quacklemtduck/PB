@page "/ProjectForm"
@using PB.Core
@using PB.Client.Services
@using System.Net.Http
@using Microsoft.AspNetCore.Components
@using Radzen.Blazor
@inject HttpClient http
@inject NavigationManager NavigationManager
@inject Radzen.DialogService DialogService

<style>
    form .row {
        margin-bottom: 20px;
    }
</style>


@if (project == null || Educations == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if(IsEditing){
<h1>Edit project</h1>
}else{
<h1>Create new project</h1>
}
    <RadzenTemplateForm Data="@project" Submit="@((TempProject args) => { Submit(args); })">

        <RadzenFieldset Text="" style="width: 100%;">
            <div class="row">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Project Title" />
                </div>
                <div class="col-md-8">
                    <RadzenTextBox @bind-Value=@project.Title style="width: 100%;" Name="Title" />
                    <RadzenRequiredValidator Component="Title" Text="Project title is required" Style="position: absolute"/>
                </div>
            </div>
            <div class="row">
                <div class="col-xl-6">
                    <h6>Notifications</h6>
                    <RadzenSwitch @bind-Value=@project.Notification Style="margin-bottom: 20px" Change=@(args => OnChange(args,
                    "Notification")) />
                    <br />
                </div>
            </div>
            <div class="row">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Description" />
                </div>
                <div class="col-md-8">
                    <RadzenTextArea @bind-Value=@project.Description style="width: 100%" Name="Description" />
                    <RadzenRequiredValidator Component="Description" Text="Description is required" Style="position: absolute"/>
                    
                </div>
            </div>
            <div class="row">
                <RadzenCard>
                <h4>Select Educations</h4>
                <p>Select the educations that you want your project to be visible to</p>
                <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value=@project.ChosenEducations Multiple="true" Data=@Educations
                               TextProperty="Name" ValueProperty="Id" Change=@(args => OnEducationChange(args)) Style="height:200px" Class="w-100">
                    <Template Context="innercontext">
                        @((innercontext as EducationDetailsDTO).UniversityId) - @((innercontext as EducationDetailsDTO).Name) - @((innercontext as EducationDetailsDTO).Grade)
                    </Template>
                </RadzenListBox>
            </RadzenCard>
            </div>
        </RadzenFieldset>

        <div class="row justify-content-center">
            <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Save" />
                <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel"
                style="display: inline-block; margin-left: 10px;" Text="Cancel" Click=@Cancel />
            </div>
        </div>
        
    </RadzenTemplateForm>
}


@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int? Pid {get; set;}
    public bool IsEditing {get; set;}
    private TempProject? project {get; set;}
    //IEnumerable<int> ChosenEducations;
    ICollection<EducationDetailsDTO> Educations;
    public class TempProject
    {
        public string Title { get; set; }
        public bool Notification { get; set; }
        public string Description { get; set; }
        public IEnumerable<int> ChosenEducations { get; set; } = new HashSet<int>();
        
        public Status Status {get; set;} = Status.Hidden;
    }



    protected override async Task OnInitializedAsync()
    {
        Educations = (await UniversityService.GetAllEducations(http)).OrderBy(e => e.UniversityId).ThenBy(e => e.Name).ToList();

        if(Pid != null){
            var result = await ProjectService.GetProject(http, Pid);
            if(result != null){
                IsEditing = true;
                project = new TempProject{Title=result.Title, Notification=result.Notification, Description=result.Description, ChosenEducations=result.Educations, Status=result.Status};
            }else{
                Pid = null;
                project = new TempProject();
            }
        }else{
            project = new TempProject();
        }
    }
    

    async void Submit(TempProject arg)  //Called when you press save on project form
    {
        try {
            var req = new ProjectCreateDTO{Title= arg.Title, Description=arg.Description, Notification= arg.Notification, Educations= arg.ChosenEducations.ToHashSet(), Status=arg.Status};
            if(Pid != null){req.Id = Pid;}
            var res = await ProjectService.PostProject(http, req);
            if (res.IsSuccessStatusCode)
            {
                var created = await res.Content.ReadFromJsonAsync<ProjectDetailsDTO>();
                var uri = $"{NavigationManager.BaseUri}project/{created.ID}";
                NavigationManager.NavigateTo(uri);
                await ShowCloseableFromOverlayDialog();
            }
        } catch (Exception e) {
            await ShowErrorMissingEducations(e); 
        }
    }

    void OnEducationChange(object O){
        Console.WriteLine(O);
    }

    void OnChange(bool? value, string name)
    {
        
    }

    void Cancel() //Called when you press cancel on project form
    {
        NavigationManager.NavigateTo($"{NavigationManager.BaseUri}MyProjects");
    }

    async Task ShowCloseableFromOverlayDialog()
    {
        if(!IsEditing) {
        await DialogService.OpenAsync("Project creation success!", ds =>
            @<div>
            You have successfully created a project
            <RadzenImage Path="checkmark.png" Style="width: 12%; margin: 1rem;" /> 
        </div>, new DialogOptions() { CloseDialogOnOverlayClick = true });
        } else
        {
            await DialogService.OpenAsync("Project change success!", ds =>
        @<div>
            You have successfully edited the project
            <RadzenImage Path="checkmark.png" Style="width: 12%; margin: 1rem;"/> 
        </div>, new DialogOptions() { CloseDialogOnOverlayClick = true });
        }
    }

    async Task ShowErrorMissingEducations(Exception e) 
    {
     await DialogService.OpenAsync("Project Form Error".ToString(), ds =>
        @<div>
            You need to fill out at least one education for your project.
        </div>, new DialogOptions() { CloseDialogOnOverlayClick = true });
    }

    protected override void OnInitialized()
    {
        DialogService.OnOpen += Open;
        DialogService.OnClose += Close;
    }

    public void Dispose()
    {
        // The DialogService is a singleton so it is advisable to unsubscribe.
        DialogService.OnOpen -= Open;
        DialogService.OnClose -= Close;
    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        Console.WriteLine("Dialog opened");
    }

    void Close(dynamic result)
    {
        Console.WriteLine($"Dialog closed");
    }

}

@page "/ProjectForm"
@using PB.Core
@using PB.Client.Services
@using System.Net.Http
@using Microsoft.AspNetCore.Components
@using Radzen.Blazor
@inject HttpClient http
@inject NavigationManager NavigationManager
@inject Radzen.DialogService DialogService

<style>
    form .row {
        margin-bottom: 20px;
    }
</style>

<h2>Create new project</h2>

@if (project == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenTemplateForm Data="@project" Submit="@((TempProject args) => { Submit(args); })">

        <RadzenFieldset Text="" style="width: 100%;">
            <div class="row">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Project Title" />
                </div>
                <div class="col-md-8">
                    <RadzenTextBox @bind-Value=@project.Title style="width: 100%;" Name="Title" />
                </div>
            </div>
            <div class="row">
                <div class="col-xl-6">
                    <h6>Notifications</h6>
                    <RadzenSwitch @bind-Value=@project.Notification Style="margin-bottom: 20px" Change=@(args => OnChange(args,
                    "Notification")) />
                    <br />
                </div>
            </div>
            <div class="row">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Description" />
                </div>
                <div class="col-md-8">
                    <RadzenTextArea @bind-Value=@project.Description style="width: 100%" Name="Description" />
                </div>
            </div>
        </RadzenFieldset>

        <div class="row justify-content-center">
            <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Save" />
                <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel"
                style="display: inline-block; margin-left: 10px;" Text="Cancel" Click=@Cancel />
            </div>
        </div>
        
    </RadzenTemplateForm>
}

@code {
    private TempProject project {get; set;} = new TempProject();
    public class TempProject
    {
        public string Title { get; set; }
        public bool Notification { get; set; }
        public string Description { get; set; }
        public ISet<int> Educations { get; set; } = new HashSet<int>();
    }

    async void Submit(TempProject arg)  //Called when you press save on project form
    {
        var req = new ProjectCreateDTO{Title= arg.Title, Description=arg.Description, Notification= arg.Notification, Educations= arg.Educations};
        Console.WriteLine(arg.Notification);
        Console.WriteLine(arg.Title);
        Console.WriteLine(arg.Description);
        var res = await ProjectService.CreateProject(http, req);
        Console.WriteLine(res!.ToString());
        if (res.IsSuccessStatusCode)
        {
            var created = await res.Content.ReadFromJsonAsync<ProjectDetailsDTO>();
            var uri = $"{NavigationManager.BaseUri}project/{created.ID}";
            NavigationManager.NavigateTo(uri);
            await ShowCloseableFromOverlayDialog();
        }
    }

    void OnChange(bool? value, string name)
    {
        
    }

    void Cancel() //Called when you press cancel on project form
    {
        
    }

    async Task ShowCloseableFromOverlayDialog()
    {
     await DialogService.OpenAsync("Project creation success!", ds =>
        @<div>
            You have successfully created a project
            <RadzenImage Path="checkmark.png" Style="width: 12%; margin: 1rem;"/> 
        </div>, new DialogOptions() { CloseDialogOnOverlayClick = true });
    }

    protected override void OnInitialized()
    {
        DialogService.OnOpen += Open;
        DialogService.OnClose += Close;
    }

    public void Dispose()
    {
        // The DialogService is a singleton so it is advisable to unsubscribe.
        DialogService.OnOpen -= Open;
        DialogService.OnClose -= Close;
    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        Console.WriteLine("Dialog opened");
    }

    void Close(dynamic result)
    {
        Console.WriteLine($"Dialog closed");
    }

}